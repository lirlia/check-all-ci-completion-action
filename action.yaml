name: "Check All CI Completion"
description: "wether all ci status which be related to commit are success or not"
inputs:
  commit-hash:
    description: "git commit hash to get check suites"
    required: false
  disable-errexit:
    description: "if true, use exit 0 whether CI results are not completed or not success"
    required: false
    default: "false"
  ignore-check-suite-ids:
    description: "ignore check_suite_ids"
    required: false
    default: "000000000000000"
  loop-count:
    description: "How many loop in this ci"
    required: false
    default: "-1"
  timeout-seconds:
    description: "How long run this ci"
    required: false
    default: "1800"
  sleep-seconds:
    description: "Sleep seconds in a loop"
    required: false
    default: "30"
outputs:
  result:
    description: "the RESULT of the specific check-suites (success or failure)"
    value: ${{ steps.check-ci-statuses.outputs.result }}
  status:
    description: "the STATUS of the specific check-suites (completed or in-progress)"
    value: ${{ steps.check-ci-statuses.outputs.status }}

runs:
  using: "composite"
  steps:
    - id: check-ci-statuses
      shell: bash
      env:
        DISABLE_ERREXIT: "${{ inputs.disable-errexit }}"
        IGNORE_CHECK_SUITE_IDS: "${{ inputs.ignore-check-suite-ids }}"
        LOOP_COUNT: "${{ inputs.loop-count }}"
        SLEEP_SECONDS: "${{ inputs.sleep-seconds }}"
        SPECIFIC_COMMIT_HASH: "${{ inputs.commit-hash }}"
        TIMEOUT_SECONDS: "${{ inputs.timeout-seconds }}"
      run: |

        set -x

        # function
        function prefail() { echo "$@" 1>&2; exit 1; }
        function output() {
          echo "{status}={$1}" >> $GITHUB_OUTPUT
          echo "{result}={$2}" >> $GITHUB_OUTPUT
        }

        # set default output
        output "null" "null"

        # validation
        [[ "$DISABLE_ERREXIT" =~ ^(true|false)$ ]] ||
          prefail "disable-errexit must be set true or false  (use: ${DISABLE_ERREXIT}) "

        # use specific commit hash
        [[ $SPECIFIC_COMMIT_HASH ]] || SPECIFIC_COMMIT_HASH="$GITHUB_SHA"

        # define error exit code if fail
        ERREXIT_CODE=1
        [[ $DISABLE_ERREXIT == "true" ]] && ERREXIT_CODE=0

        # get this job's check suite id, because of ignore this job
        echo "${{ github.token }}" | gh auth login --with-token
        CHECK_SUITE_ID=$(gh api "repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" | jq -r '.check_suite_id')

        SECONDS=0
        # loop until ci which be related to commit completed by check check-suites status
        while [ $SECONDS -lt $TIMEOUT_SECONDS ]
        do
            # get all ci check-suites count
            # https://docs.github.com/ja/rest/reference/checks#get-a-check-suite
            QUERY_RESULT=$(gh api "repos/${GITHUB_REPOSITORY}/commits/${SPECIFIC_COMMIT_HASH}/check-suites" \
                | jq -r ".check_suites[] \
                | select(any(.app;.slug != \"codecov\")) \
                | select(any(.app;.slug != \"dependabot\")) \
                | select(any(.app;.slug != \"renovate\")) \
                | select(.id != ${CHECK_SUITE_ID}) \
                | select([.id] | inside([${IGNORE_CHECK_SUITE_IDS}]) | not )")

            # if QUERY_RESULT is blank, treat all ci is succeeded
            if [[ $QUERY_RESULT = "" ]]; then
               output "completed" "success"
               exit 0
            fi

            # get all ci check-suites status
            # https://docs.github.com/ja/rest/reference/checks#get-a-check-suite
            STATUS=$(gh api "repos/${GITHUB_REPOSITORY}/commits/${SPECIFIC_COMMIT_HASH}/check-suites" \
                | jq -r ".check_suites[] \
                | select(any(.app;.slug != \"codecov\")) \
                | select(any(.app;.slug != \"dependabot\")) \
                | select(any(.app;.slug != \"renovate\")) \
                | select(.id != ${CHECK_SUITE_ID}) \
                | select([.id] | inside([${IGNORE_CHECK_SUITE_IDS}]) | not ) \
                | .status" \
                | sort \
                | uniq)

            # if all statuses are completed, break
            [ "${STATUS}" = "completed" ] && break
            [[ $(( LOOP_COUNT-- )) -eq 0 ]] && output "in-progress" "null" && exit $ERREXIT_CODE
            sleep $SLEEP_SECONDS
        done

        # if all check-suites results are success or neutral, this ci is success
        # https://docs.github.com/ja/rest/guides/getting-started-with-the-checks-api#about-check-suites
        gh api "repos/${GITHUB_REPOSITORY}/commits/${SPECIFIC_COMMIT_HASH}/check-suites" \
            | jq -r ".check_suites[] \
                | select(any(.app;.slug != \"codecov\")) \
                | select(any(.app;.slug != \"dependabot\")) \
                | select(any(.app;.slug != \"renovate\")) \
                | select(.id != ${CHECK_SUITE_ID}) \
                | select([.id] | inside([${IGNORE_CHECK_SUITE_IDS}]) | not ) \
                | .conclusion" \
            | sort \
            | uniq \
            | grep -v -E "(success|neutral)" && RESULT="failure" || RESULT="success"

        # output
        [[ "${STATUS}" = "completed" ]] || STATUS="in-progress"
        output "${STATUS}" "${RESULT}"

        [[ "${RESULT}" = "success" ]] && exit 0 || exit $ERREXIT_CODE
